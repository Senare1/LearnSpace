# Generated by Django 5.0.6 on 2024-07-21 22:48

import courses.models
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Matter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('matter_name', models.CharField(choices=[('ANGLAIS', 'ANGLAIS'), ('FRANCAIS', 'FRANCAIS'), ('HISTOIRE GEOGRAPHIE', 'HISTOIRE GEOGRAPHIE'), ('MATHEMATIQUES', 'MATHEMATIQUES'), ('PHYSIQUE CHIMIE', 'PHYSIQUE CHIMIE'), ('SVT', 'SVT'), ('PHILOSOPHIE', 'PHILOSOPHIE'), ('ALEMAND', 'ALEMAND')], default='math', max_length=32, unique=True)),
                ('is_first_cycle', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_code', models.CharField(max_length=10, unique=True, verbose_name='Code du cours')),
                ('course_title', models.CharField(max_length=128, verbose_name='Titre du cours')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
                ('text_content', models.TextField(blank=True, null=True, verbose_name='Contenu en texte')),
                ('course_level', models.CharField(choices=[('SIXIEME', 'SIXIEME'), ('CINQUIEME', 'CINQUIEME'), ('TROISIEME', 'TROISIEME'), ('QUATRIEME', 'QUATRIEME'), ('SECONDE', 'SECONDE'), ('PREMIERE', 'PREMIERE'), ('TERMINAL', 'TERMINAL')], default='SIXIEME', max_length=128)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('difficulty', models.CharField(choices=[('DEBUTANT', 'DEBUTANT'), ('NORMAL', 'NORMAL'), ('AVANCE', 'AVANCE'), ('COMPLEXE', 'COMPLEXE')], max_length=32, verbose_name='Difficulté du cours')),
                ('is_premium', models.BooleanField(default=False, verbose_name='Status du cours')),
                ('course_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
                ('course_matter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to='courses.matter', verbose_name='Matiere')),
            ],
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chapter_title', models.CharField(max_length=32, unique=True)),
                ('content_text', models.TextField(blank=True, null=True)),
                ('chapter_course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chapters', to='courses.course')),
            ],
        ),
        migrations.CreateModel(
            name='Evaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('evaluation_name', models.CharField(max_length=32)),
                ('evaluation_matter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluations', to='courses.matter')),
            ],
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('challenge_name', models.CharField(max_length=128)),
                ('challenge_image', models.FileField(blank=True, null=True, upload_to='courses/images/', validators=[courses.models.FileValidator(allowed_types=['image/jpeg', 'image/png', 'image/gif', 'image/webp'], message='Seules les images sont autorisées.')])),
                ('challenge_document', models.FileField(blank=True, null=True, upload_to='courses/documents/', validators=[courses.models.FileValidator(allowed_types=['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'], message='Seuls les documents sont autorisés.')])),
                ('challenge_matter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='challenges', to='courses.matter')),
            ],
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_media', models.ImageField(blank=True, null=True, upload_to='courses/images/', validators=[courses.models.FileValidator(allowed_types=['image/jpeg', 'image/png', 'image/gif', 'image/webp'], message='Seules les images sont autorisées.')])),
                ('video_media', models.FileField(blank=True, null=True, upload_to='courses/videos/', validators=[courses.models.FileValidator(allowed_types=['video/mp4', 'video/avi', 'video/mpeg', 'video/webm', 'video/mkv'], message='Seules les vidéos sont autorisées.')])),
                ('audio_media', models.FileField(blank=True, null=True, upload_to='courses/audio/', validators=[courses.models.FileValidator(allowed_types=['audio/mpeg', 'audio/mp3', 'audio/ogg', 'audio/wav', 'audio/x-wav'], message='Seuls les fichiers audio sont autorisés.')])),
                ('document_media', models.FileField(blank=True, null=True, upload_to='courses/documents/', validators=[courses.models.FileValidator(allowed_types=['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'], message='Seuls les documents sont autorisés.')])),
                ('media_chapter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='medias', to='courses.chapter')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('response', models.TextField()),
                ('question_evaluation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='courses.evaluation')),
            ],
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transId', models.CharField(max_length=200, null=True)),
                ('token', models.CharField(max_length=200, null=True)),
                ('status', models.CharField(max_length=128)),
                ('learner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Tutorial',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tutorial_name', models.CharField(max_length=128)),
                ('tutorial_videos', models.FileField(blank=True, null=True, upload_to='courses/videos/', validators=[courses.models.FileValidator(allowed_types=['video/mp4', 'video/avi', 'video/mpeg', 'video/webm', 'video/mkv'], message='Seules les vidéos sont autorisées.')])),
                ('tutorial_matter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tutorials', to='courses.matter')),
            ],
        ),
    ]
